# GitHub Release Workflow
# Triggers:
# 1. prereleased - a pre-release is created
# 2. edited - a release, pre-release, or draft release is edited
# Steps:
# 1. Build from source
# 2. Upload a zip artifact to the GitHub Release
# 3. Build & Publish a Docker Image to GitHub Container Registry

name: release

on:
  release:
    types: [prereleased, edited]

env:
  BUILD_DIR: "./dist/"
  PACK_BUILDER: gcr.io/buildpacks/builder:v1
  FUNCTION_NAME: ${{ github.event.repository.name }}
  FUNCTION_TYPE: http
  REGISTRY: ghcr.io
  IMAGE: ${{ github.repository }}
  TAG: ${{ github.event.release.tag_name }}
  ARTIFACT: "${{ github.event.repository.name }}-${{ github.event.release.tag_name }}.zip"

jobs:
  main:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        # actions/checkout@v2.4.0
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Choose NodeJS version
        # actions/setup-node@v2.5.1
        uses: actions/setup-node@1f8c6b94b26d0feae1e387ca63ccbdc44d27b561
        with:
          node-version: 16

      - name: Install dependencies
        run: npm ci

      - name: Run build script
        run: npm run build

      - name: Zip & Upload to GitHub Release
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          zip -r "$ARTIFACT" ./
          gh release upload "$TAG" "$ARTIFACT" --clobber
          rm -f "$ARTIFACT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Buildpacks Pack
        # buildpacks/github-actions/setup-pack@v4.5.1
        uses: buildpacks/github-actions/setup-pack@0b5cd009ad32942e90a3f9aef30c0a55cc9f4aed

      - name: Log in to the Container registry
        # docker/login-action@v1.12.0
        uses: docker/login-action@42d299face0c5c43a0487c477f595ac9cf22f1a7
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Publish Docker image to GHCR
        working-directory: ${{ env.BUILD_DIR }}
        shell: bash
        run: |
          #!/usr/bin/env bash
          set -euo pipefail
          pack build \
            --path ./ \
            --builder $PACK_BUILDER \
            --env GOOGLE_FUNCTION_SIGNATURE_TYPE=$FUNCTION_TYPE \
            --env GOOGLE_FUNCTION_TARGET=$FUNCTION_NAME \
            --tag "$REGISTRY/$IMAGE:latest" \
            --publish "$REGISTRY/$IMAGE:$TAG"
